'use strict';
var obsidian = require('obsidian');

class NoteBlockPlugin extends obsidian.Plugin {
    async onload() {
        console.log('–ó–∞–≥—Ä—É–∂–µ–Ω Note Block Plugin —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π {note}, {warning}, {tip}, {admonition}');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ app –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
        this.appInstance = this.app;
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–µ—Ä–µ–∑ MarkdownPostProcessor –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –±–ª–æ–∫–æ–≤
        this.registerMarkdownPostProcessor((element, context) => {
            this.processAdmonitionBlocks(element, context);
        });
    }
    
    processAdmonitionBlocks(element, context) {
        const codeBlocks = element.querySelectorAll('pre code');
        
        codeBlocks.forEach((codeBlock) => {
            const preElement = codeBlock.parentElement;
            const languageMatch = codeBlock.className.match(/language-(\S+)/);
            
            if (languageMatch) {
                const blockType = languageMatch[1];
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –±–ª–æ–∫–æ–≤
                if (blockType === '{note}' || blockType === '{warning}' || 
                    blockType === '{tip}' || blockType === '{admonition}') {
                    console.log(`üéØ –ù–∞–π–¥–µ–Ω –±–ª–æ–∫ ${blockType}`);
                    this.convertToAdmonitionBlock(codeBlock, preElement, blockType, context);
                }
            }
        });
    }
    
    convertToAdmonitionBlock(codeBlock, preElement, blockType, context) {
        const content = codeBlock.textContent || '';
        const originalMarkdown = `\`\`\`${blockType}\n${content}\n\`\`\``;
        
        // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        const container = document.createElement('div');
        container.addClass('admonition-block');
        container.addClass(`admonition-${blockType.replace(/[{}]/g, '')}`);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        let headerText = '';
        let icon = '';
        
        switch(blockType) {
            case '{note}':
                headerText = '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ';
                icon = 'üìù';
                break;
            case '{warning}':
                headerText = '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ';
                icon = '‚ö†Ô∏è';
                break;
            case '{tip}':
                headerText = '–°–æ–≤–µ—Ç';
                icon = 'üí°';
                break;
            case '{admonition}':
                headerText = '–í–Ω–∏–º–∞–Ω–∏–µ';
                icon = 'üìå';
                break;
        }
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const headerDiv = document.createElement('div');
        headerDiv.addClass('admonition-header');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const headerContent = document.createElement('span');
        headerContent.setText(`${icon} ${headerText}`);
        headerDiv.appendChild(headerContent);
        
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        const copyButton = document.createElement('button');
        copyButton.addClass('admonition-copy-button');
        copyButton.setAttribute('title', '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ Markdown');
        copyButton.innerHTML = 'üìã';
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        copyButton.addEventListener('click', async (e) => {
            e.stopPropagation();
            try {
                await navigator.clipboard.writeText(originalMarkdown);
                
                // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
                const originalHTML = copyButton.innerHTML;
                copyButton.innerHTML = '‚úÖ';
                copyButton.classList.add('copied');
                
                setTimeout(() => {
                    copyButton.innerHTML = originalHTML;
                    copyButton.classList.remove('copied');
                }, 2000);
                
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
                copyButton.innerHTML = '‚ùå';
                setTimeout(() => {
                    copyButton.innerHTML = 'üìã';
                }, 2000);
            }
        });
        
        headerDiv.appendChild(copyButton);
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π Markdown
        const contentDiv = document.createElement('div');
        contentDiv.addClass('admonition-content');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ Markdown
        // –°–ø–æ—Å–æ–± 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º MarkdownRenderChild
        try {
            const MarkdownRenderChild = obsidian.MarkdownRenderChild;
            const child = new MarkdownRenderChild(contentDiv);
            child.containerEl = contentDiv;
            
            // –†–µ–Ω–¥–µ—Ä–∏–º Markdown –∫–æ–Ω—Ç–µ–Ω—Ç
            obsidian.MarkdownRenderer.render(
                this.appInstance,
                content,
                contentDiv,
                context.sourcePath,
                child
            );
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ Markdown:', error);
            // –ï—Å–ª–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            contentDiv.setText(content);
        }
        
        // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        container.appendChild(headerDiv);
        container.appendChild(contentDiv);
        
        // –ó–∞–º–µ–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –±–ª–æ–∫ –∫–æ–¥–∞ –Ω–∞ –Ω–∞—à –±–ª–æ–∫
        if (preElement) {
            preElement.replaceWith(container);
        }
    }
}

module.exports = NoteBlockPlugin;